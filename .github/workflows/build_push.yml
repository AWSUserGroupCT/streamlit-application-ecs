name: Build Streamlit and Push to ECR + Deploy to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1          # set this to your preferred AWS region, e.g. us-west-1
  ECS_TASK_DEFINITION: task-definition.json # set this to the path to your Amazon ECS task definition                                            # file, e.g. .aws/task-definition.json
  ECR_REPOSITORY: streamlit-profile-val
  CONTAINER_NAME: streamlit-profile-container
  ECS_SERVICE: fargate-service-streamlit-profile

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:  
      imageid: ${{ steps.build-image.outputs.image }}
    steps:
    - uses: actions/checkout@v4.1.3
    - name: Set up Python
      uses: actions/setup-python@v5
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ secrets.PRODUCTION_ACCOUNT  }}:role/ecs-streamlit-role
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registries: ${{ secrets.SHARED_ACCOUNT_ID }}

    - id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: "${{ env.ECR_REPOSITORY }}"
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: echo image id
      run: echo "${{ steps.build-image.outputs.image }}"
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY}}:${{ github.sha }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

